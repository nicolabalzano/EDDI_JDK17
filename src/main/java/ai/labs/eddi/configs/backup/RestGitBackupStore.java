package ai.labs.eddi.configs.backup;


import ai.labs.eddi.configs.backup.model.GitBackupSettings;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.Properties;

public class RestGitBackupStore implements IGitBackupStore {
    private final String gitSettingsPath = System.getProperty("user.dir") + "/gitsettings/";
    private static final String ENV_AES_KEY = "EDDI_GIT_AES_KEY";
    private static final String ENV_AES_IV = "EDDI_GIT_AES_IV";
    private static final org.jboss.logging.Logger log = org.jboss.logging.Logger.getLogger(RestGitBackupStore.class);

    private String encrypt(String value) throws Exception {
        String key = System.getenv(ENV_AES_KEY);
        String iv = System.getenv(ENV_AES_IV);
        if (key == null || iv == null) throw new IllegalStateException("AES key/IV not set in environment variables");
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        SecretKeySpec secretKey = new SecretKeySpec(Base64.getDecoder().decode(key), "AES");
        IvParameterSpec ivSpec = new IvParameterSpec(Base64.getDecoder().decode(iv));
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec);
        byte[] encrypted = cipher.doFinal(value.getBytes("UTF-8"));
        return Base64.getEncoder().encodeToString(encrypted);
    }

    private String decrypt(String encrypted) throws Exception {
        String key = System.getenv(ENV_AES_KEY);
        String iv = System.getenv(ENV_AES_IV);
        if (key == null || iv == null) throw new IllegalStateException("AES key/IV not set in environment variables");
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        SecretKeySpec secretKey = new SecretKeySpec(Base64.getDecoder().decode(key), "AES");
        IvParameterSpec ivSpec = new IvParameterSpec(Base64.getDecoder().decode(iv));
        cipher.init(Cipher.DECRYPT_MODE, secretKey, ivSpec);
        byte[] decoded = Base64.getDecoder().decode(encrypted);
        return new String(cipher.doFinal(decoded), "UTF-8");
    }

    @Override
    public GitBackupSettings readSettings() {
        GitBackupSettings internalSettings = readSettingsInternal();
        internalSettings.setUsername("****");
        internalSettings.setPassword("****");
        return internalSettings;
    }

    @Override
    public void storeSettings(GitBackupSettings settings) {
        Properties properties = new Properties();
        try {
            if (!Files.exists(Paths.get(gitSettingsPath))) Files.createDirectories(Paths.get(gitSettingsPath));

            properties.setProperty("git.branch", settings.getBranch());
            properties.setProperty("git.commiter_email", settings.getCommitterEmail());
            properties.setProperty("git.commiter_name", settings.getCommitterName());
            // Encrypt credentials before saving
            try {
                properties.setProperty("git.password", encrypt(settings.getPassword()));
                properties.setProperty("git.username", encrypt(settings.getUsername()));
            } catch (Exception e) {
                log.error("Encryption error storing Git credentials", e);
                properties.setProperty("git.password", "");
                properties.setProperty("git.username", "");
            }
            properties.setProperty("git.repository_url", settings.getRepositoryUrl());
            properties.setProperty("git.description", settings.getDescription());
            properties.setProperty("git.isautomatic", String.valueOf(settings.isAutomatic()));

            OutputStream os = new FileOutputStream(new File(gitSettingsPath + "settings.properties"));
            properties.store(os, "autogenerated by EDDI");
        } catch (IOException e) {
            log.error("Error storing Git settings", e);
        }
    }

    @Override
    public GitBackupSettings readSettingsInternal() {
        Properties properties = new Properties();
        try {
            InputStream is = new FileInputStream(new File(gitSettingsPath + "settings.properties"));
            properties.load(is);

            GitBackupSettings settings = new GitBackupSettings();
            settings.setBranch(properties.getProperty("git.branch"));
            settings.setCommitterEmail(properties.getProperty("git.commiter_email"));
            settings.setCommitterName(properties.getProperty("git.commiter_name"));
            // Decrypt credentials after reading
            try {
                settings.setPassword(decrypt(properties.getProperty("git.password")));
                settings.setUsername(decrypt(properties.getProperty("git.username")));
            } catch (Exception e) {
                log.error("Decryption error reading Git credentials", e);
                settings.setPassword("");
                settings.setUsername("");
            }
            settings.setRepositoryUrl(properties.getProperty("git.repository_url"));
            settings.setDescription(properties.getProperty("git.description"));
            settings.setAutomatic(Boolean.parseBoolean(properties.getProperty("git.isautomatic")));
            return settings;
        } catch (FileNotFoundException e) {
            GitBackupSettings settings = new GitBackupSettings();
            settings.setDescription("No Git settings found");
            return settings;
        } catch (IOException e) {
            GitBackupSettings settings = new GitBackupSettings();
            settings.setDescription("No Git settings found");
            return new GitBackupSettings();
        }
    }
}
