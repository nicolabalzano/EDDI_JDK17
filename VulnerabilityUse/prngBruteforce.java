import java.util.Arrays;
import java.util.List;
import java.util.Random;

public class prngBruteforce {
    public static void main(String[] args) {
        List<String> results = Arrays.asList("Result1", "Result2", "Result3", "Result4");
        
        // Simula il codice originale - genera la sequenza "target"
        // CORRETTO: cattura il timestamp DOPO la creazione di Random
        Random targetRandom = new Random();  // Seed sconosciuto
        long currentTime = System.currentTimeMillis();
        
        System.out.println("=== TARGET SEQUENCE (Unknown Seed) ===");
        System.out.println("Current timestamp reference: " + currentTime);
        
        int numberToBruteforce = 5; // Numero di risultati da generare
        int[] targetSequence = new int[numberToBruteforce];
        for (int i = 0; i < numberToBruteforce; i++) {
            targetSequence[i] = targetRandom.nextInt(results.size());
            System.out.println("Target " + i + ": " + results.get(targetSequence[i]) + " (index: " + targetSequence[i] + ")");
        }
        
        System.out.println("\n=== BRUTEFORCE ATTACK ===");
        
        // Bruteforce: cerca indietro nel tempo dal momento attuale
        long startTime = currentTime - 1000;
        long endTime = currentTime + 1000;
        boolean found = false;
        
        System.out.println("Trying seeds from " + startTime + " to " + endTime);
        System.out.println("Total range: " + (endTime - startTime + 1) + " seeds to test");
        
        long testsPerformed = 0;
        for (long candidateSeed = startTime; candidateSeed <= endTime; candidateSeed++) {
            testsPerformed++;
            if (testsPerformed % 500 == 0) {
                System.out.println("Tested " + testsPerformed + " seeds...");
            }
            
            Random testRandom = new Random(candidateSeed);
            boolean matches = true;
            
            // Verifica se questo seed produce la stessa sequenza
            for (int i = 0; i < numberToBruteforce; i++) {
                int testValue = testRandom.nextInt(results.size());
                if (testValue != targetSequence[i]) {
                    matches = false;
                    break;
                }
            }
            
            if (matches) {
                System.out.println("\nSEED FOUND!");
                System.out.println("Seed: " + candidateSeed);
                System.out.println("Difference from reference time: " + (candidateSeed - currentTime) + "ms");
                System.out.println("Tests performed: " + testsPerformed);
                
                // Verifica ulteriore: genera più numeri per conferma
                System.out.println("\nVerification - Next 5 numbers:");
                Random verifyRandom = new Random(candidateSeed);
                
                // Salta i primi 10 (già verificati)
                for (int i = 0; i < numberToBruteforce; i++) {
                    verifyRandom.nextInt(results.size());
                }
                
                // Mostra i prossimi 5
                for (int i = 0; i < 5; i++) {
                    int nextValue = verifyRandom.nextInt(results.size());
                    System.out.println("Next " + i + ": " + results.get(nextValue));
                }
                
                found = true;
                break;
            }
        }
        
        if (!found) {
            System.out.println("Seed not found in range. The timing gap might be larger than expected.");
            System.out.println("Try running the program multiple times or increase the search range further.");
        }
        
        // Mostra la differenza teorica
        System.out.println("\n=== ANALYSIS ===");
        System.out.println("The actual seed used by Random() was likely System.currentTimeMillis()");
        System.out.println("at the exact moment of Random object creation.");
        System.out.println("Reference time: " + currentTime);
        System.out.println("Search range: ±1000ms");
    }
}